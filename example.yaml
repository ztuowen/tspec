TSPEC: 0.01

thrddecomp:
  param:
    GRID: [64,128,256,512,1024,2048]
    BLOCK: [64,128,256,512,1024]

limitwarp:
  depends:
    - thrddecomp
  param:
    WARP: [2,4,8,16,32]
  scr: |
    if WARP*32 > BLOCK:
      exit()

cachestore:
  depends:
    - limitwarp
  param:
    COP: ["cs", "wt"]


cyccompile:
  depends:
    - cachestore
  scr: |
    # build the program
    import subprocess
    subprocess.run(["make", "clean"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    r = subprocess.run(["make", 'CFLAGS=-DGRIDDIM={} -DBLOCKDIM={} -DWARP={} -DCYCL -Xptxas -dscm={}'
                                .format(GRID, BLOCK, WARP, COP)], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    if (r.returncode != 0):
      exit()

ncyccompile:
  depends:
    - cachestore
  scr: |
    # build the program
    import subprocess
    subprocess.run(["make", "clean"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    r = subprocess.run(["make", 'CFLAGS=-DGRIDDIM={} -DBLOCKDIM={} -DWARP={} -DNCYCL -Xptxas -dscm={}'
                                .format(GRID, BLOCK, WARP, COP)], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    if (r.returncode != 0):
      exit()

cycsubdomain:
  depends:
    - cyccompile
  param:
    SDZ: [2,4,8,16,32,64,128]
    SDY: [2,4,8,16,32,64,128]
    SDX: [2,4,8,16]
  scr: |
    SD = "{},{},{}".format(SDZ,SDY,SDX)

cyclicx:
  depends:
    - cycsubdomain
  scr: |
    SC = "{},4,4".format(SDZ)

cyclicz:
  depends:
    - cycsubdomain
  scr: |
    SC = "1,4,4"

ncycsubdomain:
  depends:
    - ncyccompile
  param:
    SDZ: [2,4,8,16,32,64,128]
    SDY: [2,4,8,16,32,64,128]
    SDX: [2,4,8,16]
  scr: |
    SD = "{},{},{}".format(SDZ,SDY,SDX)

noncycliccube:
  param:
    CYCL: ["NCYCL"]
  depends:
    - ncycsubdomain
  scr: |
    SC = "1,{},{}".format(SDY,SDX)

bench:
  depends:
    - cyclicx
    - cyclicz
    - noncycliccube
  scr: |
    r = subprocess.run(["./stencil", SD, SC],stdout=subprocess.PIPE)
    v = float(r.stdout.decode('utf-8'))
    report("gstencils", v)
